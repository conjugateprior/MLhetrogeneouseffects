data_uganda <- data_uganda %>%
mutate(hsworked_year_self = replace_na(hsworked_year_self, 1))
#income
data_uganda$income_na <- ifelse(is.na(data_uganda$income), 1, 0)
data_uganda <- data_uganda %>%
mutate(income = replace_na(income, 1))
#index_empowerment
data_uganda$index_empowerment_na <- ifelse(is.na(data_uganda$index_empowerment), 1, 0)
data_uganda <- data_uganda %>%
mutate(index_empowerment = replace_na(index_empowerment, 1))
#children
data_uganda$children_na <- ifelse(is.na(data_uganda$children), 1, 0)
data_uganda <- data_uganda %>%
mutate(children = replace_na(children, 1))
#life_skills
data_uganda$life_skills_na <- ifelse(is.na(data_uganda$life_skills), 1, 0)
data_uganda <- data_uganda %>%
mutate(life_skills = replace_na(life_skills, 1))
#livelihood
data_uganda$livelihood_na <- ifelse(is.na(data_uganda$livelihood), 1, 0)
data_uganda <- data_uganda %>%
mutate(livelihood = replace_na(livelihood, 1))
#rural
data_uganda$rural_na <- ifelse(is.na(data_uganda$rural), 1, 0)
data_uganda <- data_uganda %>%
mutate(rural = replace_na(rural, 1))
#age
data_uganda$age_na <- ifelse(is.na(data_uganda$age), 1, 0)
data_uganda <- data_uganda %>%
mutate(age = replace_na(age, 1))
## Make sure the data has no missing values (outcome and treatment to run causal forests!!!)
data_uganda_is.na <- data_uganda[!is.na(data_uganda$foll_index_income_gen_act), ]
data_uganda_na <- as_tibble(data_uganda_is.na)
#complete cases for selected variables
data_uganda_na_o <- data_uganda %>%
filter(complete.cases(index_empowerment,
foll_index_income_gen_act,# maybe here include partner (we can do an interaction with age)
children,
partner,
branchno,
age,
rural,
income,
enroll_school,
study_hours,  # standardization for this one not working NA
vill_id))
#data_uganda[complete.cases(data_uganda$index_empowerment),] #try to choose only specific columns to take the complete cases from
#data_to_split <- sample(c(FALSE, TRUE), nrow(data_uganda_na_o), replace = TRUE) #sample only rows without NAs
## Datacamp method (ratio 75:25); most of causal forest use this ratio but haven't found true argument to chose this ratio.
# Get number of rows
N <- nrow(data_uganda_na_o)
# Calculate how many rows 75% of N should be and print it; we use round to get an integer
target <- round(N * 0.80)
# Create the vector of N uniform random variables: rv
rv <- runif(N)
# Use rv to create the training set: ud_train (75% of data) and ud_test (25% of data)
data_uganda_train <- data_uganda_na_o[rv < 0.80, ]
data_uganda_test <- data_uganda_na_o[rv >= 0.80, ]
# Use nrow() to examine ud_train and ud_test
nrow(data_uganda_train)
nrow(data_uganda_test)
## I think it is large enough the data set --> we don't need cross validation to split the data!
# Other method (ratio 70:30)
set.seed(400) # To always run same answer; or just put seed
train <- sample(nrow(data_uganda_na_o), 0.7*nrow(data_uganda_na_o), replace = FALSE)
data_uganda_train_v2 <- data_uganda_na_o[train,] #  Train is like the data we would collect in a randomized experiment
data_uganda_valid_v2 <- data_uganda_na_o[-train,] # Test would be the future cases which we are trying to predict
summary(data_uganda_train_v2)
nrow(data_uganda_train_v2)
summary(data_uganda_valid_v2)
nrow(data_uganda_valid_v2)
library(grf)
# Random seed to reproduce results
set.seed
## INCOME GENERATING ACTIVITY - IGA
# Create outcome and inputs for the Causal Forests (important all numeric; including dummy code the factor variables)
Y_outcome <- as.matrix(data_uganda_train$foll_index_income_gen_act) # Vector outcome of interest
#attach outcome to train data
X_vars <- model.matrix(lm (Y_outcome ~ children + children_na +
branchno + branchno_na +
age + age_na +
rural + rural_na +
income + income_na +
enroll_school + enroll_school_na +
study_hours+ study_hours_na +
index_empowerment + index_empowerment_na +
enroll_school*study_hours +
enroll_school_na*study_hours_na +
children*age +
children_na*age_na,
data = data_uganda_train)) # X is a matrix of the covariates which we are using to predict heterogeneity in treatment effect
X_baseline <- model.matrix.default(children + children_na +
branchno + branchno_na +
age + age_na +
rural + rural_na +
income + income_na +
enroll_school + enroll_school_na +
study_hours+ study_hours_na +
index_empowerment + index_empowerment_na +
att_earn_moneyfam + att_earn_moneyfam_na +
z_Entrep_total + z_Entrep_total_na +
z_Expenditure_totDF + z_Expenditure_totDF_na +
value_assets + value_assets_na +
loan_brac + loan_brac_na +
ablework_married + ablework_married_na +
M_marrywhen + M_marrywhen_na +
who_decidehusband + who_decidehusband_na +
work_married + work_married_na +
want_respect + want_respect_na +
worry_job + worry_job_na +
satisf_income + satisf_income_na +
self_empl + selfempl_na +
hsworked_year_empl + hsworked_year_empl_na +
hsworked_year_self + hsworked_year_self_na +
life_skills + life_skills_na +
livelihood + livelihood_na +
enroll_school*study_hours +
enroll_school_na*study_hours_na +
children*age +
children_na*age_na,
data = data_uganda_train)
X_baseline <- model.matrix(lm(Y_outcome ~ children + children_na +
branchno + branchno_na +
age + age_na +
rural + rural_na +
income + income_na +
enroll_school + enroll_school_na +
study_hours+ study_hours_na +
index_empowerment + index_empowerment_na +
att_earn_moneyfam + att_earn_moneyfam_na +
z_Entrep_total + z_Entrep_total_na +
z_Expenditure_totDF + z_Expenditure_totDF_na +
value_assets + value_assets_na +
loan_brac + loan_brac_na +
ablework_married + ablework_married_na +
M_marrywhen + M_marrywhen_na +
who_decidehusband + who_decidehusband_na +
work_married + work_married_na +
want_respect + want_respect_na +
worry_job + worry_job_na +
satisf_income + satisf_income_na +
self_empl + selfempl_na +
hsworked_year_empl + hsworked_year_empl_na +
hsworked_year_self + hsworked_year_self_na +
life_skills + life_skills_na +
livelihood + livelihood_na +
enroll_school*study_hours +
enroll_school_na*study_hours_na +
children*age +
children_na*age_na,
data = data_uganda_train))
## Datacamp method (ratio 75:25); most of causal forest use this ratio but haven't found true argument to chose this ratio.
# Get number of rows
N <- nrow(data_uganda)
# Calculate how many rows 75% of N should be and print it; we use round to get an integer
target <- round(N * 0.80)
# Create the vector of N uniform random variables: rv
rv <- runif(N)
# Use rv to create the training set: ud_train (75% of data) and ud_test (25% of data)
data_uganda_train <- data_uganda[rv < 0.80, ]
data_uganda_test <- data_uganda[rv >= 0.80, ]
# Use nrow() to examine ud_train and ud_test
nrow(data_uganda_train)
nrow(data_uganda_test)
## I think it is large enough the data set --> we don't need cross validation to split the data!
# Other method (ratio 70:30)
set.seed(400) # To always run same answer; or just put seed
train <- sample(nrow(data_uganda_na_o), 0.7*nrow(data_uganda_na_o), replace = FALSE)
data_uganda_train_v2 <- data_uganda_na_o[train,] #  Train is like the data we would collect in a randomized experiment
data_uganda_valid_v2 <- data_uganda_na_o[-train,] # Test would be the future cases which we are trying to predict
summary(data_uganda_train_v2)
nrow(data_uganda_train_v2)
summary(data_uganda_valid_v2)
nrow(data_uganda_valid_v2)
library(grf)
# Random seed to reproduce results
set.seed
## INCOME GENERATING ACTIVITY - IGA
# Create outcome and inputs for the Causal Forests (important all numeric; including dummy code the factor variables)
Y_outcome <- as.matrix(data_uganda_train$foll_index_income_gen_act) # Vector outcome of interest
X_vars <- model.matrix(lm (Y_outcome ~ children + children_na +
branchno + branchno_na +
age + age_na +
rural + rural_na +
income + income_na +
enroll_school + enroll_school_na +
study_hours+ study_hours_na +
index_empowerment + index_empowerment_na +
enroll_school*study_hours +
enroll_school_na*study_hours_na +
children*age +
children_na*age_na,
data = data_uganda_train)) # X is a matrix of the covariates which we are using to predict heterogeneity in treatment effect
X_baseline <- model.matrix(lm(Y_outcome ~ children + children_na +
branchno + branchno_na +
age + age_na +
rural + rural_na +
income + income_na +
enroll_school + enroll_school_na +
study_hours+ study_hours_na +
index_empowerment + index_empowerment_na +
att_earn_moneyfam + att_earn_moneyfam_na +
z_Entrep_total + z_Entrep_total_na +
z_Expenditure_totDF + z_Expenditure_totDF_na +
value_assets + value_assets_na +
loan_brac + loan_brac_na +
ablework_married + ablework_married_na +
M_marrywhen + M_marrywhen_na +
who_decidehusband + who_decidehusband_na +
work_married + work_married_na +
want_respect + want_respect_na +
worry_job + worry_job_na +
satisf_income + satisf_income_na +
self_empl + selfempl_na +
hsworked_year_empl + hsworked_year_empl_na +
hsworked_year_self + hsworked_year_self_na +
life_skills + life_skills_na +
livelihood + livelihood_na +
enroll_school*study_hours +
enroll_school_na*study_hours_na +
children*age +
children_na*age_na,
data = data_uganda_train))
X_baseline <- model.matrix(lm(Y_outcome ~ children + children_na +
branchno + branchno_na +
age + age_na +
rural + rural_na +
income + income_na +
enroll_school + enroll_school_na +
study_hours+ study_hours_na +
index_empowerment + index_empowerment_na +
att_earn_moneyfam + att_earn_moneyfam_na +
z_Entrep_total + z_Entrep_total_na +
z_Expenditure_totDF + z_Expenditure_totDF_na +
value_assets + value_assets_na +
loan_brac + loan_brac_na +
ablework_married + ablework_married_na +
M_marrywhen + M_marrywhen_na +
who_decidehusband + who_decidehusband_na +
work_married + work_married_na +
want_respect + want_respect_na +
worry_job + worry_job_na +
satisf_income + satisf_income_na +
selfempl + selfempl_na +
hsworked_year_empl + hsworked_year_empl_na +
hsworked_year_self + hsworked_year_self_na +
life_skills + life_skills_na +
livelihood + livelihood_na +
enroll_school*study_hours +
enroll_school_na*study_hours_na +
children*age +
children_na*age_na,
data = data_uganda_train))
#train causal forest with most baseline variables
causal_forest_IGA <- causal_forest(X = X_baseline,
Y = Y_outcome,
W = W_treatment,
num.trees = 3000, #more trees result in better confident intervals
clusters = C_vars, # paper clusters
orthog.boosting = TRUE)
#complete cases for selected variables
data_uganda <- data_uganda %>%
filter(complete.cases(index_empowerment,
foll_index_income_gen_act,# maybe here include partner (we can do an interaction with age)
children,
partner,
branchno,
age,
rural,
income,
enroll_school,
study_hours,  # standardization for this one not working NA
vill_id))
## INCOME GENERATING ACTIVITY - IGA
# Create outcome and inputs for the Causal Forests (important all numeric; including dummy code the factor variables)
Y_outcome <- as.matrix(data_uganda_train$foll_index_income_gen_act) # Vector outcome of interest
#train causal forest with most baseline variables
causal_forest_IGA <- causal_forest(X = X_baseline,
Y = Y_outcome,
W = W_treatment,
num.trees = 3000, #more trees result in better confident intervals
clusters = C_vars, # paper clusters
orthog.boosting = TRUE)
W_treatment <- as.matrix(data_uganda_train$treatment) # Treatment assignment
#train causal forest
causalforests_IGA_train <- causal_forest(X = X_vars,
Y = Y_outcome,
W = W_treatment,
num.trees = 3000, #more trees result in better confident intervals
clusters = C_vars, # paper clusters
orthog.boosting = TRUE)
library(grf)
# Random seed to reproduce results
set.seed
## INCOME GENERATING ACTIVITY - IGA
# Create outcome and inputs for the Causal Forests (important all numeric; including dummy code the factor variables)
Y_outcome <- as.matrix(data_uganda_train$foll_index_income_gen_act) # Vector outcome of interest
#attach outcome to train data
X_vars <- model.matrix(lm (Y_outcome ~ children + children_na +
branchno + branchno_na +
age + age_na +
rural + rural_na +
income + income_na +
enroll_school + enroll_school_na +
study_hours+ study_hours_na +
index_empowerment + index_empowerment_na +
enroll_school*study_hours +
enroll_school_na*study_hours_na +
children*age +
children_na*age_na,
data = data_uganda_train)) # X is a matrix of the covariates which we are using to predict heterogeneity in treatment effect
X_baseline <- model.matrix(lm(Y_outcome ~ children + children_na +
branchno + branchno_na +
age + age_na +
rural + rural_na +
income + income_na +
enroll_school + enroll_school_na +
study_hours+ study_hours_na +
index_empowerment + index_empowerment_na +
att_earn_moneyfam + att_earn_moneyfam_na +
z_Entrep_total + z_Entrep_total_na +
z_Expenditure_totDF + z_Expenditure_totDF_na +
value_assets + value_assets_na +
loan_brac + loan_brac_na +
ablework_married + ablework_married_na +
M_marrywhen + M_marrywhen_na +
who_decidehusband + who_decidehusband_na +
work_married + work_married_na +
want_respect + want_respect_na +
worry_job + worry_job_na +
satisf_income + satisf_income_na +
selfempl + selfempl_na +
hsworked_year_empl + hsworked_year_empl_na +
hsworked_year_self + hsworked_year_self_na +
life_skills + life_skills_na +
livelihood + livelihood_na +
enroll_school*study_hours +
enroll_school_na*study_hours_na +
children*age +
children_na*age_na,
data = data_uganda_train))
C_vars <- data_uganda_train$vill_id
W_treatment <- as.matrix(data_uganda_train$treatment) # Treatment assignment
#train causal forest
causalforests_IGA_train <- causal_forest(X = X_vars,
Y = Y_outcome,
W = W_treatment,
num.trees = 3000, #more trees result in better confident intervals
clusters = C_vars, # paper clusters
orthog.boosting = TRUE)
## Datacamp method (ratio 75:25); most of causal forest use this ratio but haven't found true argument to chose this ratio.
# Get number of rows
N <- nrow(data_uganda)
# Calculate how many rows 75% of N should be and print it; we use round to get an integer
target <- round(N * 0.80)
# Create the vector of N uniform random variables: rv
rv <- runif(N)
# Use rv to create the training set: ud_train (75% of data) and ud_test (25% of data)
data_uganda_train <- data_uganda[rv < 0.80, ]
data_uganda_test <- data_uganda[rv >= 0.80, ]
# Use nrow() to examine ud_train and ud_test
nrow(data_uganda_train)
nrow(data_uganda_test)
## I think it is large enough the data set --> we don't need cross validation to split the data!
# Other method (ratio 70:30)
set.seed(400) # To always run same answer; or just put seed
train <- sample(nrow(data_uganda_na_o), 0.7*nrow(data_uganda_na_o), replace = FALSE)
data_uganda_train_v2 <- data_uganda_na_o[train,] #  Train is like the data we would collect in a randomized experiment
data_uganda_valid_v2 <- data_uganda_na_o[-train,] # Test would be the future cases which we are trying to predict
summary(data_uganda_train_v2)
nrow(data_uganda_train_v2)
summary(data_uganda_valid_v2)
nrow(data_uganda_valid_v2)
library(grf)
# Random seed to reproduce results
set.seed
## INCOME GENERATING ACTIVITY - IGA
# Create outcome and inputs for the Causal Forests (important all numeric; including dummy code the factor variables)
Y_outcome <- as.matrix(data_uganda_train$foll_index_income_gen_act) # Vector outcome of interest
#attach outcome to train data
X_vars <- model.matrix(lm (Y_outcome ~ children + children_na +
branchno + branchno_na +
age + age_na +
rural + rural_na +
income + income_na +
enroll_school + enroll_school_na +
study_hours+ study_hours_na +
index_empowerment + index_empowerment_na +
enroll_school*study_hours +
enroll_school_na*study_hours_na +
children*age +
children_na*age_na,
data = data_uganda_train)) # X is a matrix of the covariates which we are using to predict heterogeneity in treatment effect
X_baseline <- model.matrix(lm(Y_outcome ~ children + children_na +
branchno + branchno_na +
age + age_na +
rural + rural_na +
income + income_na +
enroll_school + enroll_school_na +
study_hours+ study_hours_na +
index_empowerment + index_empowerment_na +
att_earn_moneyfam + att_earn_moneyfam_na +
z_Entrep_total + z_Entrep_total_na +
z_Expenditure_totDF + z_Expenditure_totDF_na +
value_assets + value_assets_na +
loan_brac + loan_brac_na +
ablework_married + ablework_married_na +
M_marrywhen + M_marrywhen_na +
who_decidehusband + who_decidehusband_na +
work_married + work_married_na +
want_respect + want_respect_na +
worry_job + worry_job_na +
satisf_income + satisf_income_na +
selfempl + selfempl_na +
hsworked_year_empl + hsworked_year_empl_na +
hsworked_year_self + hsworked_year_self_na +
life_skills + life_skills_na +
livelihood + livelihood_na +
enroll_school*study_hours +
enroll_school_na*study_hours_na +
children*age +
children_na*age_na,
data = data_uganda_train))
C_vars <- data_uganda_train$vill_id
W_treatment <- as.matrix(data_uganda_train$treatment) # Treatment assignment
#train causal forest
causalforests_IGA_train <- causal_forest(X = X_vars,
Y = Y_outcome,
W = W_treatment,
num.trees = 3000, #more trees result in better confident intervals
clusters = C_vars, # paper clusters
orthog.boosting = TRUE)
# but see again!!! Athey and Wager 2019; orthogonalization
### Consider later if to add as instrument club_distance and run instrumental forest instead of causalforest
# We don't mention here Y.hat and W.hat --> Null; software silently estimates Y.hat or W.hat via regression forests.
## Predict the test data
# Tell grf to include variance estimates, and then I assign the predictions (the estimated treatment effects) to the test data frame so that we can use these in subsequent analyses
preds_IGA <- predict(
object = causalforests_IGA_train,
newdata = model.matrix(~ children + children_na +
branchno + branchno_na +
age + age_na +
rural + rural_na +
income + income_na +
enroll_school + enroll_school_na +
study_hours+ study_hours_na +
index_empowerment + index_empowerment_na +
enroll_school*study_hours +
enroll_school_na*study_hours_na +
children*age +
children_na*age_na,
data= data_uganda_test),
estimate.variance = TRUE
)
#train causal forest with most baseline variables
causal_forest_IGA <- causal_forest(X = X_baseline,
Y = Y_outcome,
W = W_treatment,
num.trees = 3000, #more trees result in better confident intervals
clusters = C_vars, # paper clusters
orthog.boosting = TRUE)
#prediction to a model with most baselines
preds_IGA_allbaseline <- predict(
object = causal_forest_IGA,
newdata = model.matrix(~ children + children_na +
branchno + branchno_na +
age + age_na +
rural + rural_na +
income + income_na +
enroll_school + enroll_school_na +
study_hours+ study_hours_na +
index_empowerment + index_empowerment_na +
att_earn_moneyfam + att_earn_moneyfam_na +
z_Entrep_total + z_Entrep_total_na +
z_Expenditure_totDF + z_Expenditure_totDF_na +
value_assets + value_assets_na +
loan_brac + loan_brac_na +
ablework_married + ablework_married_na +
M_marrywhen + M_marrywhen_na +
who_decidehusband + who_decidehusband_na +
work_married + work_married_na +
want_respect + want_respect_na +
worry_job + worry_job_na +
satisf_income + satisf_income_na +
selfempl + selfempl_na +
hsworked_year_empl + hsworked_year_empl_na +
hsworked_year_self + hsworked_year_self_na +
life_skills + life_skills_na +
livelihood + livelihood_na +
enroll_school*study_hours +
enroll_school_na*study_hours_na +
children*age +
children_na*age_na,
data= data_uganda_test),
estimate.variance = TRUE
)
#variables importance - A simple weighted sum of how many times feature i was split on at each depth in the forest.
variable_importance_IGA <- variable_importance(causalforests_IGA_train, decay.exponent = 4, max.depth = 400) ##not so sure what is decay.exponent and max.depth
variable_importance_IGA
#data_uganda_test$preds_IGA <- preds_IGA$predictions[, 1]
# Estimate the conditional average treatment effect of the train model the full sample (CATE).
CATE_IGA <- average_treatment_effect(causalforests_IGA_train, target.sample = "all")
install.packages("bartMachine")
#install.packages("bartMachine")
library(bartMachine)
install.packages("bartMachine")
install.packages("rJava")
library(bartMachine)
library(rJava)
Sys.setenv(JAVA_HOME = "C:/Program Files/Java/jdk1.8.0_101/")
library(bartMachine)
library(bartMachine)
